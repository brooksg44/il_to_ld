; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /Users/gregorybrooks/Clojure/il_to_ld; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.52.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:59175 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉il-to-ld.core꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉il-to-ld.core꞉> 
; Jack-in done.
clj꞉il-to-ld.core꞉> 
; Evaluating file: il_parser.clj
#'il-to-ld.il-parser/explain-il-validation
clj꞉il-to-ld.il-parser꞉> 
(il-grammar)
; Execution error (ClassCastException) at il-to-ld.il-parser/eval14293 (REPL:54).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉il-to-ld.il-parser꞉> 
#'il-to-ld.il-parser/il-grammar
clj꞉il-to-ld.il-parser꞉> 
#'il-to-ld.il-parser/il-parser
clj꞉il-to-ld.il-parser꞉> 
(transform-il il-parser)

; Execution error (IllegalArgumentException) at instaparse.util/throw-illegal-argument-exception (util.clj:14).
; Invalid parse-tree, not recognized as either enlive or hiccup format.
clj꞉il-to-ld.il-parser꞉> 
:il-to-ld.il-parser/ladder
clj꞉il-to-ld.il-parser꞉> 
:il-to-ld.il-parser/ladder
clj꞉il-to-ld.il-parser꞉> (transform-il "LD X0\nAND X1\nST Y0")




                                                                                            
; Execution error (IllegalArgumentException) at instaparse.util/throw-illegal-argument-exception (util.clj:14).
; Invalid parse-tree, not recognized as either enlive or hiccup format.
clj꞉il-to-ld.il-parser꞉> 
:il-to-ld.il-parser/ladder
clj꞉il-to-ld.il-parser꞉> 
:il-to-ld.il-parser/ladder#'il-to-ld.il-parser/transform-il
clj꞉il-to-ld.il-parser꞉> 
(transform-il "LD X0\nAND X1\nST Y0")
"LD X0\nAND X1\nST Y0"
clj꞉il-to-ld.il-parser꞉> 
; nREPL Connection was closed
